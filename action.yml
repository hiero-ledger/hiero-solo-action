name: "Hiero Solo Action"
description: "Run a Hiero based network by using the solo tool"
inputs:
  installMirrorNode:
    description: "Defines if a mirror node should be installed"
    required: true
    default: false
    type: boolean
  hieroVersion:
    description: "Version of Hiero consensus node to be used"
    required: false
    default: "v0.58.10"
  mirrorNodeVersion:
    description: "Version of the mirror node to be used"
    required: false
    default: "v0.133.0"
  mirrorNodePortRest:
    description: "Port for Mirror Node REST API"
    required: false
    default: "5551"
  mirrorNodePortGrpc:
    description: "Port for Mirror Node gRPC"
    required: false
    default: "5600"
  mirrorNodePortWeb3Rest:
    description: "Port for Mirror Node WEB3 REST"
    required: false
    default: "8545"
  installRelay:
    description: "Install JSON-RPC-Relay"
    required: false
    default: false
    type: boolean
  relayPort:
    description: "Port for JSON-RPC-Relay"
    required: false
    default: "7546"
outputs:
  accountId:
    description: "Account ID of the generated ED25519 account (default for simplicity)"
    value: ${{ steps.create-ed25519.outputs.accountId }}
  publicKey:
    description: "Public key of the generated ED25519 account (default for simplicity)"
    value: ${{ steps.create-ed25519.outputs.publicKey }}
  privateKey:
    description: "Private key of the generated ED25519 account (default for simplicity)"
    value: ${{ steps.create-ed25519.outputs.privateKey }}
  ecdsaAccountId:
    description: "ECDSA account id of generated account"
    value: ${{ steps.create-ecdsa.outputs.accountId }}
  ecdsaPublicKey:
    description: "ECDSA public key of generated account"
    value: ${{ steps.create-ecdsa.outputs.publicKey }}
  ecdsaPrivateKey:
    description: "ECDSA private key of generated account"
    value: ${{ steps.create-ecdsa.outputs.privateKey }}
  ed25519AccountId:
    description: "ED25519 account id of generated account"
    value: ${{ steps.create-ed25519.outputs.accountId }}
  ed25519PublicKey:
    description: "ED25519 public key of generated account"
    value: ${{ steps.create-ed25519.outputs.publicKey }}
  ed25519PrivateKey:
    description: "ED25519 private key of generated account"
    value: ${{ steps.create-ed25519.outputs.privateKey }}
runs:
  using: "composite"
  steps:
    - name: Print inputs
      shell: bash
      run: |
        echo "installMirrorNode: ${{ inputs.installMirrorNode }}"
        echo "is installMirrorNode: ${{ inputs.installMirrorNode == 'true' }}"

    - name: Setup Java
      uses: actions/setup-java@99b8673ff64fbf99d8d325f52d9a5bdedb8483e9 # v4.2.1
      with:
        distribution: temurin
        java-version: 21

    - name: Setup Node
      uses: actions/setup-node@1e60f620b9541d16bece96c5465dc8ee9832be0b # v4.0.3
      with:
        node-version: 22

    - name: Install WGet CLI
      shell: bash
      run: sudo apt-get update && sudo apt-get install -y wget

    - name: Install Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"

    - name: Setup Kind
      uses: helm/kind-action@a1b0e391336a6ee6713a0583f8c6240d70863de3 # v1.12.0
      with:
        install_only: true
        node_image: kindest/node:v1.31.4@sha256:2cb39f7295fe7eafee0842b1052a599a4fb0f8bcf3f83d96c7f4864c357c6c30
        version: v0.26.0
        kubectl_version: v1.31.4
        verbosity: 3
        wait: 120s

    - name: Install Solo
      shell: bash
      run: npm install -g @hashgraph/solo@0.39.0

    - name: Deploy Solo Test Network
      shell: bash
      env:
        SOLO_CLUSTER_NAME: solo-e2e
        SOLO_NAMESPACE: solo
        SOLO_CLUSTER_SETUP_NAMESPACE: solo-cluster
        SOLO_DEPLOYMENT: solo-deployment
        HIERO_VERSION: ${{ inputs.hieroVersion }}
      run: |
        # Create a Kubernetes cluster using kind
        kind create cluster -n $SOLO_CLUSTER_NAME

        # Initialize the Solo CLI configuration
        solo init

        # Connect the Solo CLI to the kind cluster using a cluster reference name
        solo cluster-ref connect --cluster-ref kind-$SOLO_CLUSTER_NAME --context kind-$SOLO_CLUSTER_NAME

        # Create deployment
        solo deployment create -n $SOLO_NAMESPACE --deployment $SOLO_DEPLOYMENT

        # Add the kind cluster to the deployment with 1 consensus node
        solo deployment add-cluster --deployment $SOLO_DEPLOYMENT --cluster-ref kind-$SOLO_CLUSTER_NAME --num-consensus-nodes 1

        # Generate node keys
        solo node keys --gossip-keys --tls-keys -i node1 --deployment $SOLO_DEPLOYMENT

        # Setup the Solo cluster
        solo cluster-ref setup -s $SOLO_CLUSTER_NAME

        # Deploy network
        solo network deploy -i node1 --deployment $SOLO_DEPLOYMENT

        # Setup node
        solo node setup -i node1 --deployment $SOLO_DEPLOYMENT -t $HIERO_VERSION --quiet-mode

        # Start node
        solo node start -i node1 --deployment $SOLO_DEPLOYMENT

        # Debug: List services in the solo namespace
        echo "Listing services in namespace $SOLO_NAMESPACE:"
        kubectl get svc -n $SOLO_NAMESPACE

        # Port forward HAProxy (only if service exists)
        if kubectl get svc haproxy-node1-svc -n $SOLO_NAMESPACE >/dev/null 2>&1; then
          kubectl port-forward svc/haproxy-node1-svc -n $SOLO_NAMESPACE 50211:50211 &
        else
          echo "HAProxy service haproxy-node1-svc not found, skipping port-forward"
        fi

    - name: Deploy MirrorNode
      if: ${{ inputs.installMirrorNode == 'true' }} # see https://github.com/actions/runner/issues/2238
      shell: bash
      env:
        SOLO_NAMESPACE: solo
        SOLO_DEPLOYMENT: solo-deployment
        MIRROR_NODE_VERSION: ${{ inputs.mirrorNodeVersion }}
      run: |
        solo mirror-node deploy --deployment $SOLO_DEPLOYMENT --mirror-node-version $MIRROR_NODE_VERSION
        # Debug: List services in the solo namespace
        echo "Listing services in namespace $SOLO_NAMESPACE:"
        kubectl get svc -n $SOLO_NAMESPACE
        # Port forward mirror node REST API (only if service exists)
        if kubectl get svc mirror-rest -n $SOLO_NAMESPACE >/dev/null 2>&1; then
          kubectl port-forward svc/mirror-rest -n $SOLO_NAMESPACE ${{ inputs.mirrorNodePortRest }}:80 &
        else
          echo "Mirror node service mirror-rest not found, skipping port-forward"
        fi
        # Port forward mirror node gRPC (only if service exists)
        if kubectl get svc mirror-grpc -n $SOLO_NAMESPACE >/dev/null 2>&1; then
          kubectl port-forward svc/mirror-grpc -n $SOLO_NAMESPACE ${{ inputs.mirrorNodePortGrpc }}:5600 &
        else
          echo "Mirror node service mirror-grpc not found, skipping port-forward"
        fi
        # Port forward mirror node web3 (only if service exists)
        if kubectl get svc mirror-web3 -n $SOLO_NAMESPACE >/dev/null 2>&1; then
          kubectl port-forward svc/mirror-web3 -n $SOLO_NAMESPACE ${{ inputs.mirrorNodePortWeb3Rest }}:80 &
        else
          echo "Mirror node service mirror-web3 not found, skipping port-forward"
        fi

    - name: Deploy JSON-RPC-Relay
      if: ${{ inputs.installRelay == 'true' }}
      shell: bash
      env:
        SOLO_NAMESPACE: solo
        SOLO_DEPLOYMENT: solo-deployment
      run: |
        echo "Installing JSON-RPC-Relay..."
        solo relay deploy -i node1 --deployment $SOLO_DEPLOYMENT
        echo "JSON-RPC-Relay installed successfully"
        # Debug: List services in the solo namespace
        echo "Listing services in namespace $SOLO_NAMESPACE:"
        kubectl get svc -n $SOLO_NAMESPACE
        # Port forward JSON-RPC-Relay (only if service exists)
        if kubectl get svc relay-node1-hedera-json-rpc-relay -n $SOLO_NAMESPACE >/dev/null 2>&1; then
          kubectl port-forward svc/relay-node1-hedera-json-rpc-relay -n $SOLO_NAMESPACE ${{ inputs.relayPort }}:7546 &
        else
          echo "JSON-RPC-Relay service relay-node1-hedera-json-rpc-relay not found, Skipping port-forward"
        fi

    - name: Create ECDSA Account
      id: create-ecdsa
      shell: bash
      env:
        GITHUB_ACTION_PATH: ${{ github.action_path }}
        SOLO_NAMESPACE: solo
        SOLO_DEPLOYMENT: solo-deployment
      run: |
        echo "Creating ECDSA account..."
        solo account create --generate-ecdsa-key --deployment $SOLO_DEPLOYMENT > account_create_output_ecdsa.txt
        cat account_create_output_ecdsa.txt
        JSON=$(cat account_create_output_ecdsa.txt | python3 $GITHUB_ACTION_PATH/extractAccountAsJson.py) || {
          echo "Error: Python script extractAccountAsJson.py failed"
          exit 1
        }
        export ACCOUNT_ID=$(echo $JSON | jq -r '.accountId')
        export ACCOUNT_PUBLIC_KEY=$(echo $JSON | jq -r '.publicKey')
        export ACCOUNT_PRIVATE_KEY=$(kubectl get secret account-key-$ACCOUNT_ID -n $SOLO_NAMESPACE -o jsonpath='{.data.privateKey}' | base64 -d | xargs)
        solo account update --account-id $ACCOUNT_ID --hbar-amount 10000000 --deployment $SOLO_DEPLOYMENT
        echo "accountId=$ACCOUNT_ID"
        echo "publicKey=$ACCOUNT_PUBLIC_KEY"
        echo "privateKey=$ACCOUNT_PRIVATE_KEY"
        echo "accountId=$ACCOUNT_ID" >> $GITHUB_OUTPUT
        echo "publicKey=$ACCOUNT_PUBLIC_KEY" >> $GITHUB_OUTPUT
        echo "privateKey=$ACCOUNT_PRIVATE_KEY" >> $GITHUB_OUTPUT

    - name: Create ED25519 Account
      id: create-ed25519
      shell: bash
      env:
        GITHUB_ACTION_PATH: ${{ github.action_path }}
        SOLO_NAMESPACE: solo
        SOLO_DEPLOYMENT: solo-deployment
      run: |
        echo "Creating ED25519 account..."
        solo account create --deployment $SOLO_DEPLOYMENT > account_create_output_ed25519.txt
        cat account_create_output_ed25519.txt
        JSON=$(cat account_create_output_ed25519.txt | python3 $GITHUB_ACTION_PATH/extractAccountAsJson.py) || {
          echo "Error: Python script extractAccountAsJson.py failed"
          exit 1
        }
        export ACCOUNT_ID=$(echo $JSON | jq -r '.accountId')
        export ACCOUNT_PUBLIC_KEY=$(echo $JSON | jq -r '.publicKey')
        export ACCOUNT_PRIVATE_KEY=$(kubectl get secret account-key-$ACCOUNT_ID -n $SOLO_NAMESPACE -o jsonpath='{.data.privateKey}' | base64 -d | xargs)
        solo account update --account-id $ACCOUNT_ID --hbar-amount 10000000 --deployment $SOLO_DEPLOYMENT
        echo "accountId=$ACCOUNT_ID"
        echo "publicKey=$ACCOUNT_PUBLIC_KEY"
        echo "privateKey=$ACCOUNT_PRIVATE_KEY"
        echo "accountId=$ACCOUNT_ID" >> $GITHUB_OUTPUT
        echo "publicKey=$ACCOUNT_PUBLIC_KEY" >> $GITHUB_OUTPUT
        echo "privateKey=$ACCOUNT_PRIVATE_KEY" >> $GITHUB_OUTPUT

# Ref: https://haya14busa.github.io/github-action-brandings/
branding:
  icon: "share-2"
  color: "black"
